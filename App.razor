<div style="max-width: 700px; margin: auto; padding: 24px; display: flex; flex-direction: column; gap: 24px;">
    <IgbLegend @ref="_legend"></IgbLegend>
    <IgbDataChart Width="100%"
                  Height="300px"
                  Legend="_legend"
                  ComputedPlotAreaMarginMode="ComputedPlotAreaMarginMode.Series">
        <IgbCategoryDateTimeXAxis Name="xAxis"
                                  DataSource="_data"
                                  Label="@nameof(DataItem.Date)"
                                  DateTimeMemberPath="@nameof(DataItem.Date)"
                                  MajorStroke="1"
                                  Interval="21600000"
                                  LabelFormat="{0}">
            <IgbDateTimeFormatSpecifier TimeStyle="short"
                                        HourCycle="h23"
                                        Locale="ja-JP">
            </IgbDateTimeFormatSpecifier>
        </IgbCategoryDateTimeXAxis>
        <IgbNumericYAxis Name="yAxis" MinimumValue="10" MaximumValue="16" Interval="1" />
        <IgbLineSeries Title="Sample Data"
                       DataSource="_data"
                       XAxisName="xAxis"
                       YAxisName="yAxis"
                       ValueMemberPath="@nameof(DataItem.Value)">
        </IgbLineSeries>
    </IgbDataChart>
</div>

@code {
    public class DataItem
    {
        public DateTime Date { get; set; }
        public double? Value { get; set; }
    }

    private List<DataItem> _data = new()
    {
        new(){ Date = new(2024, 1, 1, 0, 0, 0) , Value = 12 },
        new(){ Date = new(2024, 1, 1, 6, 0, 0) , Value = 14 },
        new(){ Date = new(2024, 1, 1, 12, 0, 0), Value = 11 },
        new(){ Date = new(2024, 1, 1, 18, 0, 0), Value = 13 },
        new(){ Date = new(2024, 1, 2, 0, 0, 0) , Value = 15 },
        new(){ Date = new(2024, 1, 2, 6, 0, 0) , Value = 12 },
        new(){ Date = new(2024, 1, 2, 12, 0, 0), Value = 14 },
    };

    private IgbLegend? _legend;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            this.StateHasChanged();
        }
    }
}